name: ATOM Arbitrage - Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

# Required secrets:
# VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID
# RAILWAY_TOKEN
# PRIVATE_KEY, BASE_SEPOLIA_RPC_URL, ETHERSCAN_API_KEY
# BASE_SEPOLIA_CONTRACT_ADDRESS, VITE_BASE_SEPOLIA_RPC_URL, VITE_BASE_SEPOLIA_CONTRACT_ADDRESS
# SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY
# TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
# SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS, NOTIFICATION_EMAIL

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run TypeScript check
        run: npx tsc --noEmit
        
      - name: Build project
        run: npm run build
        env:
          NODE_ENV: production

  test-contracts:
    name: Test Smart Contracts
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Compile contracts
        run: npm run compile
        
      - name: Run contract tests
        run: npm run test
        env:
          REPORT_GAS: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: [test, test-contracts]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production
          VITE_BASE_SEPOLIA_RPC_URL: ${{ secrets.VITE_BASE_SEPOLIA_RPC_URL }}
          VITE_BASE_SEPOLIA_CONTRACT_ADDRESS: ${{ secrets.VITE_BASE_SEPOLIA_CONTRACT_ADDRESS }}
          
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  deploy-contracts:
    name: Deploy Smart Contracts
    runs-on: ubuntu-latest
    needs: [test-contracts]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Compile contracts
        run: npm run compile
        
      - name: Deploy to Base Sepolia
        run: npm run deploy:base
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          BASE_SEPOLIA_RPC_URL: ${{ secrets.BASE_SEPOLIA_RPC_URL }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
          
      - name: Verify contracts on Etherscan
        run: |
          if [ -f "deployment.json" ]; then
            CONTRACT_ADDRESS=$(cat deployment.json | jq -r '.contractAddress')
            npx hardhat verify --network base_sepolia $CONTRACT_ADDRESS
          fi
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        continue-on-error: true

  deploy-orchestrator:
    name: Deploy Orchestrator Bot
    runs-on: ubuntu-latest
    needs: [deploy-contracts, deploy-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install orchestrator dependencies
        run: |
          cd orchestrator
          npm ci
          
      - name: Build orchestrator
        run: |
          cd orchestrator
          npm run build
          
      - name: Deploy to Railway
        run: |
          npm install -g @railway/cli
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          cd orchestrator
          railway up --service atom-orchestrator
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          BASE_SEPOLIA_RPC_URL: ${{ secrets.BASE_SEPOLIA_RPC_URL }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          BASE_SEPOLIA_CONTRACT_ADDRESS: ${{ secrets.BASE_SEPOLIA_CONTRACT_ADDRESS }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-contracts, deploy-orchestrator]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify Telegram
        if: ${{ secrets.TELEGRAM_BOT_TOKEN && secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ "${{ needs.deploy-frontend.result }}" == "success" ] && [ "${{ needs.deploy-contracts.result }}" == "success" ] && [ "${{ needs.deploy-orchestrator.result }}" == "success" ]; then
            MESSAGE="üöÄ ATOM Arbitrage deployed successfully!%0A%0A‚úÖ Frontend: Deployed to Vercel%0A‚úÖ Contracts: Deployed to Base Sepolia%0A‚úÖ Orchestrator: Deployed to Railway%0A%0ACommit: ${{ github.sha }}%0AAuthor: ${{ github.actor }}"
          else
            MESSAGE="‚ùå ATOM Arbitrage deployment failed!%0A%0AFrontend: ${{ needs.deploy-frontend.result }}%0AContracts: ${{ needs.deploy-contracts.result }}%0AOrchestrator: ${{ needs.deploy-orchestrator.result }}%0A%0ACommit: ${{ github.sha }}%0AAuthor: ${{ github.actor }}"
          fi
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=$MESSAGE" \
            -d "parse_mode=HTML"
        continue-on-error: true
