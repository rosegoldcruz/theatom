version: '3.8'

services:
  # ATOM Arbitrage Orchestrator
  orchestrator:
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    container_name: atom-orchestrator
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - BASE_SEPOLIA_RPC_URL=${BASE_SEPOLIA_RPC_URL}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - BASE_SEPOLIA_CONTRACT_ADDRESS=${BASE_SEPOLIA_CONTRACT_ADDRESS}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - NOTIFICATION_EMAIL=${NOTIFICATION_EMAIL}
      - ENABLE_HEALTH_CHECK=true
      - HEALTH_CHECK_PORT=3001
    ports:
      - "3001:3001"
    volumes:
      - ./orchestrator/logs:/app/logs
    networks:
      - atom-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: atom-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - atom-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-atomredis123}

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: atom-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - atom-network
    depends_on:
      - orchestrator

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: atom-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - atom-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: atom-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - atom-network
    depends_on:
      - prometheus

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  atom-network:
    driver: bridge
